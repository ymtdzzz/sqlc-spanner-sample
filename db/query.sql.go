// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package db

import (
	"context"
)

const getCounter = `-- name: GetCounter :one
SELECT id, count FROM Counters
WHERE ID = ? LIMIT 1
`

func (q *Queries) GetCounter(ctx context.Context, id string) (Counter, error) {
	row := q.db.QueryRowContext(ctx, getCounter, id)
	var i Counter
	err := row.Scan(&i.ID, &i.Count)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name FROM Users
WHERE ID = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getUserWithAddresses = `-- name: GetUserWithAddresses :many
SELECT u.id, name, a.id, userid, address FROM Users u
JOIN Addresses a ON u.ID = a.UserID
WHERE u.ID = ?
`

type GetUserWithAddressesRow struct {
	ID      string
	Name    string
	ID_2    string
	Userid  string
	Address string
}

func (q *Queries) GetUserWithAddresses(ctx context.Context, id string) ([]GetUserWithAddressesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserWithAddresses, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserWithAddressesRow
	for rows.Next() {
		var i GetUserWithAddressesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ID_2,
			&i.Userid,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCounter = `-- name: UpdateCounter :exec
UPDATE Counters SET Count = ?
WHERE ID = ?
`

type UpdateCounterParams struct {
	Count int64
	ID    string
}

func (q *Queries) UpdateCounter(ctx context.Context, arg UpdateCounterParams) error {
	_, err := q.db.ExecContext(ctx, updateCounter, arg.Count, arg.ID)
	return err
}
